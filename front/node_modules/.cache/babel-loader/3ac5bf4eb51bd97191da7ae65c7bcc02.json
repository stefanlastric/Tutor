{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { GET_SUBJECT, GET_SUBJECTS, SUBJECT_ERROR, GET_MY_SUBJECTS, DELETE_SUBJECT, NOT_AVAILABLE_SUBJECT, SET_AVAILABLE_SUBJECT_REQUEST, SET_AVAILABLE_SUBJECT_FAIL, SET_AVAILABLE_SUBJECT_SUCCESS } from './types'; //export current user subjects\n\nexport const getCurrentSubject = () => async dispatch => {\n  try {\n    const res = await axios.get('/subjects/me');\n    dispatch({\n      type: GET_SUBJECT,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: SUBJECT_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //Get all subjects\n\nexport const getSubjects = () => async dispatch => {\n  try {\n    const res = await axios.get('/subjects');\n    dispatch({\n      type: GET_SUBJECTS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: SUBJECT_ERROR,\n      payload: {\n        msg: err.response,\n        status: err.response\n      }\n    });\n  }\n}; //Set Not Available\n\nexport const notAvailableSubject = id => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.patch(`/subjects/notavailable/${id}`, null, config);\n    alert('Subject successfully set Not Avaiable.');\n    dispatch({\n      type: NOT_AVAILABLE_SUBJECT,\n      payload: {\n        id\n      }\n    });\n    dispatch(setAlert('Subject Not Available', 'success'));\n  } catch (err) {\n    dispatch({\n      type: SUBJECT_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //Set Available\n\nexport const availableSubject = id => async dispatch => {\n  try {\n    dispatch({\n      type: SET_AVAILABLE_SUBJECT_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.patch(`/subjects/available/${id}`, null, config);\n    alert('Subject successfully set Avaiable.');\n    dispatch({\n      type: SET_AVAILABLE_SUBJECT_SUCCESS,\n      payload: res.data\n    });\n    dispatch(setAlert('Subject Available', 'success'));\n  } catch (err) {\n    dispatch({\n      type: SET_AVAILABLE_SUBJECT_FAIL,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //Get my subjects\n\nexport const getMySubjects = () => async dispatch => {\n  try {\n    const res = await axios.get(`/subjects/my`);\n    dispatch({\n      type: GET_MY_SUBJECTS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: SUBJECT_ERROR,\n      payload: {\n        msg: err.response,\n        status: err.response\n      }\n    });\n  }\n}; //Get subjects by ID\n\nexport const getSubjectsById = userId => async dispatch => {\n  try {\n    const res = await axios.get(`/subjects/user/${userId}`);\n    dispatch({\n      type: GET_SUBJECT,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: SUBJECT_ERROR,\n      payload: {\n        msg: err.response,\n        status: err.response\n      }\n    });\n  }\n}; //Create or update subjects\n\nexport const createSubject = (formData, history, edit = false) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.post('/subjects', formData, config);\n    dispatch({\n      type: GET_SUBJECT,\n      payload: res.data\n    });\n    dispatch(setAlert(edit ? 'Subject Updated' : 'Subject Created', 'success'));\n\n    if (!edit) {\n      history.push('/');\n    }\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: SUBJECT_ERROR,\n      payload: {\n        msg: err.response,\n        status: err.response\n      }\n    });\n  }\n}; //Delete subject\n\nexport const deleteSubject = id => async dispatch => {\n  try {\n    await axios.delete(`/subjects/${id}`);\n    dispatch({\n      type: DELETE_SUBJECT,\n      payload: id\n    });\n    dispatch(setAlert('Subject Removed', 'success'));\n  } catch (err) {\n    dispatch({\n      type: SUBJECT_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/home/stefan/Desktop/APLIKACIJA/front/src/actions/subject.js"],"names":["axios","setAlert","GET_SUBJECT","GET_SUBJECTS","SUBJECT_ERROR","GET_MY_SUBJECTS","DELETE_SUBJECT","NOT_AVAILABLE_SUBJECT","SET_AVAILABLE_SUBJECT_REQUEST","SET_AVAILABLE_SUBJECT_FAIL","SET_AVAILABLE_SUBJECT_SUCCESS","getCurrentSubject","dispatch","res","get","type","payload","data","err","msg","response","statusText","status","getSubjects","notAvailableSubject","id","config","headers","patch","alert","availableSubject","getMySubjects","getSubjectsById","userId","createSubject","formData","history","edit","post","push","errors","forEach","error","deleteSubject","delete"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { setAlert } from './alert';\n\nimport {\n  GET_SUBJECT,\n  GET_SUBJECTS,\n  SUBJECT_ERROR,\n  GET_MY_SUBJECTS,\n  DELETE_SUBJECT,\n  NOT_AVAILABLE_SUBJECT,\n  SET_AVAILABLE_SUBJECT_REQUEST,\n  SET_AVAILABLE_SUBJECT_FAIL,\n  SET_AVAILABLE_SUBJECT_SUCCESS,\n} from './types';\n\n//export current user subjects\nexport const getCurrentSubject = () => async (dispatch) => {\n  try {\n    const res = await axios.get('/subjects/me');\n\n    dispatch({\n      type: GET_SUBJECT,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: SUBJECT_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n//Get all subjects\nexport const getSubjects = () => async (dispatch) => {\n  try {\n    const res = await axios.get('/subjects');\n\n    dispatch({\n      type: GET_SUBJECTS,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: SUBJECT_ERROR,\n      payload: { msg: err.response, status: err.response },\n    });\n  }\n};\n\n//Set Not Available\nexport const notAvailableSubject = (id) => async (dispatch) => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n    const res = await axios.patch(`/subjects/notavailable/${id}`, null, config);\n\n    alert('Subject successfully set Not Avaiable.');\n    dispatch({\n      type: NOT_AVAILABLE_SUBJECT,\n      payload: { id },\n    });\n    dispatch(setAlert('Subject Not Available', 'success'));\n  } catch (err) {\n    dispatch({\n      type: SUBJECT_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n//Set Available\nexport const availableSubject = (id) => async (dispatch) => {\n  try {\n    dispatch({\n      type: SET_AVAILABLE_SUBJECT_REQUEST,\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n    const res = await axios.patch(`/subjects/available/${id}`, null, config);\n\n    alert('Subject successfully set Avaiable.');\n\n    dispatch({\n      type: SET_AVAILABLE_SUBJECT_SUCCESS,\n      payload: res.data,\n    });\n    dispatch(setAlert('Subject Available', 'success'));\n  } catch (err) {\n    dispatch({\n      type: SET_AVAILABLE_SUBJECT_FAIL,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n//Get my subjects\nexport const getMySubjects = () => async (dispatch) => {\n  try {\n    const res = await axios.get(`/subjects/my`);\n\n    dispatch({\n      type: GET_MY_SUBJECTS,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: SUBJECT_ERROR,\n      payload: { msg: err.response, status: err.response },\n    });\n  }\n};\n\n//Get subjects by ID\nexport const getSubjectsById = (userId) => async (dispatch) => {\n  try {\n    const res = await axios.get(`/subjects/user/${userId}`);\n\n    dispatch({\n      type: GET_SUBJECT,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: SUBJECT_ERROR,\n      payload: { msg: err.response, status: err.response },\n    });\n  }\n};\n\n//Create or update subjects\nexport const createSubject = (formData, history, edit = false) => async (\n  dispatch\n) => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    const res = await axios.post('/subjects', formData, config);\n\n    dispatch({\n      type: GET_SUBJECT,\n      payload: res.data,\n    });\n\n    dispatch(setAlert(edit ? 'Subject Updated' : 'Subject Created', 'success'));\n\n    if (!edit) {\n      history.push('/');\n    }\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: SUBJECT_ERROR,\n      payload: { msg: err.response, status: err.response },\n    });\n  }\n};\n\n//Delete subject\n\nexport const deleteSubject = (id) => async (dispatch) => {\n  try {\n    await axios.delete(`/subjects/${id}`);\n\n    dispatch({\n      type: DELETE_SUBJECT,\n      payload: id,\n    });\n\n    dispatch(setAlert('Subject Removed', 'success'));\n  } catch (err) {\n    dispatch({\n      type: SUBJECT_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}