{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_SUCCESS_STUDENT, LOGIN_SUCCESS_TEACHER, LOGIN_SUCCESS_ADMIN, LOGIN_FAIL, LOGOUT, CLEAR_PROFILE, GET_TEACHERS, TEACHER_ERROR } from './types';\nimport setAuthToken from '../utils/setAuthToken'; //Load user\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n\n    try {\n      const res = await axios.get('/login');\n      dispatch({\n        type: USER_LOADED,\n        payload: res.data\n      });\n      setLocalStorageRole(res.data.role); // if (res.data.role.name === 'Admin') {\n      //   dispatch({\n      //     type: LOGIN_SUCCESS_ADMIN,\n      //     payload: res.data,\n      //   });\n      // } else if (res.data.role.name === 'Teacher') {\n      //   dispatch({\n      //     type: LOGIN_SUCCESS_TEACHER,\n      //     payload: res.data,\n      //   });\n      // } else {\n      //   dispatch({\n      //     type: LOGIN_SUCCESS_STUDENT,\n      //     payload: res.data,\n      //   });\n      // }\n    } catch (err) {\n      dispatch({\n        type: AUTH_ERROR\n      });\n    }\n  } else {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; //Login user\n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/login', body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; //Register student\n\nexport const student = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/students', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; //Register teacher\n\nexport const teacher = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/teachers', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; //LOGOUT - Clear profile\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: CLEAR_PROFILE\n  });\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["/home/stefan/Desktop/APLIKACIJA/front/src/actions/auth.js"],"names":["axios","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_SUCCESS_STUDENT","LOGIN_SUCCESS_TEACHER","LOGIN_SUCCESS_ADMIN","LOGIN_FAIL","LOGOUT","CLEAR_PROFILE","GET_TEACHERS","TEACHER_ERROR","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","payload","data","setLocalStorageRole","role","err","login","email","password","config","headers","body","JSON","stringify","post","errors","response","forEach","error","msg","student","name","teacher","logout"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { setAlert } from './alert';\nimport {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  USER_LOADED,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_SUCCESS_STUDENT,\n  LOGIN_SUCCESS_TEACHER,\n  LOGIN_SUCCESS_ADMIN,\n  LOGIN_FAIL,\n  LOGOUT,\n  CLEAR_PROFILE,\n  GET_TEACHERS,\n  TEACHER_ERROR,\n} from './types';\n\nimport setAuthToken from '../utils/setAuthToken';\n//Load user\nexport const loadUser = () => async (dispatch) => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n\n    try {\n      const res = await axios.get('/login');\n      dispatch({\n        type: USER_LOADED,\n        payload: res.data,\n      });\n      setLocalStorageRole(res.data.role);\n      // if (res.data.role.name === 'Admin') {\n      //   dispatch({\n      //     type: LOGIN_SUCCESS_ADMIN,\n      //     payload: res.data,\n      //   });\n      // } else if (res.data.role.name === 'Teacher') {\n      //   dispatch({\n      //     type: LOGIN_SUCCESS_TEACHER,\n      //     payload: res.data,\n      //   });\n      // } else {\n      //   dispatch({\n      //     type: LOGIN_SUCCESS_STUDENT,\n      //     payload: res.data,\n      //   });\n      // }\n    } catch (err) {\n      dispatch({\n        type: AUTH_ERROR,\n      });\n    }\n  } else {\n    dispatch({\n      type: AUTH_ERROR,\n    });\n  }\n};\n\n//Login user\nexport const login = (email, password) => async (dispatch) => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n\n  const body = JSON.stringify({ email, password });\n\n  try {\n    const res = await axios.post('/login', body, config);\n\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data,\n    });\n\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n    }\n    dispatch({\n      type: LOGIN_FAIL,\n    });\n  }\n};\n\n//Register student\nexport const student = ({ name, email, password }) => async (dispatch) => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n\n  const body = JSON.stringify({ name, email, password });\n\n  try {\n    const res = await axios.post('/students', body, config);\n\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data,\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n    }\n    dispatch({\n      type: REGISTER_FAIL,\n    });\n  }\n};\n\n//Register teacher\nexport const teacher = ({ name, email, password }) => async (dispatch) => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n\n  const body = JSON.stringify({ name, email, password });\n\n  try {\n    const res = await axios.post('/teachers', body, config);\n\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data,\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n    }\n    dispatch({\n      type: REGISTER_FAIL,\n    });\n  }\n};\n\n//LOGOUT - Clear profile\nexport const logout = () => (dispatch) => {\n  dispatch({ type: CLEAR_PROFILE });\n  dispatch({ type: LOGOUT });\n};\n"]},"metadata":{},"sourceType":"module"}