{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.formatTime = undefined;\n\nvar _locales = require('./locales');\n\nvar formatterCache = {};\n/**\n * Gets Intl-based date formatter from formatter cache. If it doesn't exist in cache\n * just yet, it will be created on the fly.\n */\n\nvar getFormatter = function getFormatter(options) {\n  var locales = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (0, _locales.getLocale)();\n  var stringifiedOptions = JSON.stringify(options);\n\n  if (!formatterCache[locales]) {\n    formatterCache[locales] = {};\n  }\n\n  if (!formatterCache[locales][stringifiedOptions]) {\n    formatterCache[locales][stringifiedOptions] = new Intl.DateTimeFormat(locales, options).format;\n  }\n\n  return formatterCache[locales][stringifiedOptions];\n}; // eslint-disable-next-line import/prefer-default-export\n\n\nvar formatTime = exports.formatTime = function formatTime(date) {\n  return getFormatter({\n    hour: 'numeric',\n    minute: 'numeric',\n    second: 'numeric'\n  })(date);\n};","map":{"version":3,"sources":["/home/stefan/Desktop/APLIKACIJA/front/node_modules/react-time-picker/dist/shared/dateFormatter.js"],"names":["Object","defineProperty","exports","value","formatTime","undefined","_locales","require","formatterCache","getFormatter","options","locales","arguments","length","getLocale","stringifiedOptions","JSON","stringify","Intl","DateTimeFormat","format","date","hour","minute","second"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,UAAR,GAAqBC,SAArB;;AAEA,IAAIC,QAAQ,GAAGC,OAAO,CAAC,WAAD,CAAtB;;AAEA,IAAIC,cAAc,GAAG,EAArB;AAEA;;;;;AAIA,IAAIC,YAAY,GAAG,SAASA,YAAT,CAAsBC,OAAtB,EAA+B;AAChD,MAAIC,OAAO,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBP,SAAzC,GAAqDO,SAAS,CAAC,CAAD,CAA9D,GAAoE,CAAC,GAAGN,QAAQ,CAACQ,SAAb,GAAlF;AAEA,MAAIC,kBAAkB,GAAGC,IAAI,CAACC,SAAL,CAAeP,OAAf,CAAzB;;AAEA,MAAI,CAACF,cAAc,CAACG,OAAD,CAAnB,EAA8B;AAC5BH,IAAAA,cAAc,CAACG,OAAD,CAAd,GAA0B,EAA1B;AACD;;AAED,MAAI,CAACH,cAAc,CAACG,OAAD,CAAd,CAAwBI,kBAAxB,CAAL,EAAkD;AAChDP,IAAAA,cAAc,CAACG,OAAD,CAAd,CAAwBI,kBAAxB,IAA8C,IAAIG,IAAI,CAACC,cAAT,CAAwBR,OAAxB,EAAiCD,OAAjC,EAA0CU,MAAxF;AACD;;AAED,SAAOZ,cAAc,CAACG,OAAD,CAAd,CAAwBI,kBAAxB,CAAP;AACD,CAdD,C,CAgBA;;;AACA,IAAIX,UAAU,GAAGF,OAAO,CAACE,UAAR,GAAqB,SAASA,UAAT,CAAoBiB,IAApB,EAA0B;AAC9D,SAAOZ,YAAY,CAAC;AAAEa,IAAAA,IAAI,EAAE,SAAR;AAAmBC,IAAAA,MAAM,EAAE,SAA3B;AAAsCC,IAAAA,MAAM,EAAE;AAA9C,GAAD,CAAZ,CAAwEH,IAAxE,CAAP;AACD,CAFD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.formatTime = undefined;\n\nvar _locales = require('./locales');\n\nvar formatterCache = {};\n\n/**\n * Gets Intl-based date formatter from formatter cache. If it doesn't exist in cache\n * just yet, it will be created on the fly.\n */\nvar getFormatter = function getFormatter(options) {\n  var locales = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (0, _locales.getLocale)();\n\n  var stringifiedOptions = JSON.stringify(options);\n\n  if (!formatterCache[locales]) {\n    formatterCache[locales] = {};\n  }\n\n  if (!formatterCache[locales][stringifiedOptions]) {\n    formatterCache[locales][stringifiedOptions] = new Intl.DateTimeFormat(locales, options).format;\n  }\n\n  return formatterCache[locales][stringifiedOptions];\n};\n\n// eslint-disable-next-line import/prefer-default-export\nvar formatTime = exports.formatTime = function formatTime(date) {\n  return getFormatter({ hour: 'numeric', minute: 'numeric', second: 'numeric' })(date);\n};"]},"metadata":{},"sourceType":"script"}